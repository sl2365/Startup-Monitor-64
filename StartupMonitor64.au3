;*****************************************
; StartupMonitor64.au3 by sl23
; Code generated by GitHub Copilot 4.1
; Created with ISN AutoIt Studio v1.16
; Compiled with AutoIt v3.3.16.1
;*****************************************
#AutoIt3Wrapper_icon=StartupMonitor.ico
#AutoIt3Wrapper_Res_Fileversion_First_Increment=Y	; AutoIncrement: Before (Y); After (N) compile. Default=N
#AutoIt3Wrapper_Res_FileVersion_AutoIncrement=Y
#AutoIt3Wrapper_Res_Fileversion=0.0.3.118
#AutoIt3Wrapper_Res_ProductVersion=3.3.16.1
#AutoIt3Wrapper_Res_Description=StartupMonitor64
#AutoIt3Wrapper_Res_LegalCopyright=sl23
#AutoIt3Wrapper_UseX64=y

#RequireAdmin
Opt("TrayMenuMode", 3)

#include "Config.au3"
#include "Scanners.au3"
#include "Engine.au3"
#include "GUI_Review.au3"
#include "GUI_Settings.au3"

Global Const $APP_NAME = "Startup Monitor"
Global $gPaused = False
Global $gMonitorTime = 3000
Global $gNextTick = TimerInit()
Global $gReviewOpen = False
; Global references to loaded data (populated by Config.au3)
Global $gSettingsDict, $gFoldersDict, $gRegTokensDict
Global $gAllowedDict, $gDeniedDict
Global $gBaseFoldersDict, $gBaseRegDict, $gBaseTasksDict
Global $gCancelledItems ; suppression dictionary for cancelled items

; =================================================================
; MAIN INITIALIZATION
; =================================================================
_InitializeApp()
_InitializeTray()
_StartMainLoop()

; =================================================================
; INITIALIZATION FUNCTIONS
; =================================================================
Func _InitializeApp()
    $gCancelledItems = ObjCreate("Scripting.Dictionary")
    ConfigEnsureAppStructure()
    ConfigLoadAll($gSettingsDict, $gFoldersDict, $gRegTokensDict, $gAllowedDict, $gDeniedDict, _
        $gBaseFoldersDict, $gBaseRegDict, $gBaseTasksDict)
    
    ; Apply monitor time setting
    If $gSettingsDict.Exists("MonitorTime") Then
        $gMonitorTime = Number($gSettingsDict.Item("MonitorTime"))
        If $gMonitorTime < 1500 Then $gMonitorTime = 1500
    EndIf
    
    EngineInitializeLogging($gSettingsDict)
EndFunc

; =================================================================
; TRAY MENU FUNCTIONS
; =================================================================
Func _InitializeTray()
    TraySetToolTip($APP_NAME)
	Global $gTrayTitle = TrayCreateItem($APP_NAME)
    TrayCreateItem("")
    Global $gTraySettings = TrayCreateItem("⚙️ Settings")
    TrayCreateItem("")
    Global $gTrayExit = TrayCreateItem("❌ Exit")
    ; Handle tray events in main loop
EndFunc


Func _HandleTrayEvents()
    Local $msg = TrayGetMsg()
    Switch $msg
        Case $gTraySettings
            _OpenSettings()
        Case $gTrayExit
            Exit
    EndSwitch
EndFunc

Func _OpenSettings()  ; ← ADD SETTINGS FUNCTION
    ; Open the Settings GUI
    Local $result = GUIShowSettings($gSettingsDict, $gFoldersDict, $gRegTokensDict, _
        $gAllowedDict, $gDeniedDict, $gBaseFoldersDict, $gBaseRegDict, $gBaseTasksDict)
    ; Reload configuration after settings (in case changes were made)
    ConfigLoadAll($gSettingsDict, $gFoldersDict, $gRegTokensDict, $gAllowedDict, $gDeniedDict, _
        $gBaseFoldersDict, $gBaseRegDict, $gBaseTasksDict)
    ; Update monitor time if changed
    If $gSettingsDict.Exists("MonitorTime") Then
        $gMonitorTime = Number($gSettingsDict.Item("MonitorTime"))
        If $gMonitorTime < 1500 Then $gMonitorTime = 1500
    EndIf
    
    EngineLogWrite("SETTINGS", "gui", "settings_accessed", "configuration_reloaded", "SUCCESS")
EndFunc

; =================================================================
; MAIN MONITORING LOOP
; =================================================================
Func _StartMainLoop()
    While 1
        _HandleTrayEvents()
        If Not $gPaused And Not $gReviewOpen Then
            Local $elapsed = TimerDiff($gNextTick)
            If $elapsed >= $gMonitorTime Then
                $gNextTick = TimerInit()
                _PerformMonitorCycle()
            EndIf
        EndIf
        
        Sleep(50)
    WEnd
EndFunc

Func _PerformMonitorCycle()
    ; Refresh configuration data
    ConfigRefreshAllowedDenied($gAllowedDict, $gDeniedDict)
    ; Clean expired cancelled items (60 minutes = 3600000 ms)
    _CleanExpiredCancellations()
    ; Perform monitoring tick
    Local $reviewItems = EngineMonitorTick($gSettingsDict, $gFoldersDict, $gRegTokensDict, _
        $gAllowedDict, $gDeniedDict, $gBaseFoldersDict, $gBaseRegDict, $gBaseTasksDict, $gCancelledItems)
    ; Show review GUI if items found
    If IsArray($reviewItems) And UBound($reviewItems) > 0 Then
        $gReviewOpen = True
        Local $result = GUIShowReview($reviewItems, $gSettingsDict)
        $gReviewOpen = False
        ; Handle review result
        If $result[0] = "OK" Then
            ConfigCommitReviewResults($result[1], $gAllowedDict, $gDeniedDict)
        ElseIf $result[0] = "CANCEL" Then
            _AddCancelledItems($result[1])
        EndIf
    EndIf
EndFunc

; =================================================================
; CANCELLATION SUPPRESSION FUNCTIONS
; =================================================================
Func _CleanExpiredCancellations()
    Local $now = TimerInit()
    Local $expireTime = 3600000 ; 60 minutes in milliseconds
    Local $toRemove[0]
    For $key In $gCancelledItems.Keys
        Local $timestamp = $gCancelledItems.Item($key)
        If TimerDiff($timestamp) > $expireTime Then
            ReDim $toRemove[UBound($toRemove) + 1]
            $toRemove[UBound($toRemove) - 1] = $key
        EndIf
    Next
    For $i = 0 To UBound($toRemove) - 1
        $gCancelledItems.Remove($toRemove[$i])
    Next
EndFunc

Func _AddCancelledItems($itemsArray)
    Local $timestamp = TimerInit()
    For $i = 0 To UBound($itemsArray) - 1
        Local $key = $itemsArray[$i][0] ; Item key
        $gCancelledItems.Item($key) = $timestamp
    Next
EndFunc
